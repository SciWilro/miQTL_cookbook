plot(rnorm(100),rnorm(100))
text(0,0,"text")
text(c(-1,1),c(-1,1),c("text1","text2")
)
double.cv.glmnet = function (train.all.x,train.y,penalty.factor = penalty,nfolds = nfold.int,family = family) {
alpha_vector = seq(0,1,0.1)
foldid = sample(1:nfolds,size = nrow(train.all.x),replace = T)
alpha_models = list()
for(i in 1:length(alpha_vector)){
alpha_models[[i]] = cv.glmnet(train.all.x,train.y,penalty.factor = penalty.factor,foldid = foldid,family = family,alpha = alpha_vector[i])
}
mins = unlist(lapply(alpha_models,function(x){min(x$cvm)}))
mins2 = which.min(mins)
model = alpha_models[[mins2]]
}
run_CV = function (predictors, response, non_penalized, alpha = 0.5, nfold.ex = 10, nfold.int = 5,s="lambda.min",family="binomial"){
result = list()
result$models = list()
result$folds = list()
result$predictions = list()
result$roc = list()
result$auc = c()
result$predictions_zero = list()
result$models_zero = list()
result$predictions_zero = list()
result$roc_zero = list()
result$auc_zero = c()
samples = 1:nrow(predictors)
folds = createFolds(samples,k = nfold.ex)
#model training
for(i in names(folds)){
#print(paste("Fold",i,"started"))
result$folds[[i]] = folds[[i]]
test.x=as.matrix(predictors[folds[[i]],])
test.y=response[folds[[i]]]
train.x=as.matrix(predictors[-folds[[i]],])
train.y=response[-folds[[i]]]
non_penalized.train.x = non_penalized[-folds[[i]],]
non_penalized.test.x = non_penalized[folds[[i]],]
#zero model
penalty = rep(0,ncol(non_penalized.train.x))
model.zero = glmnet(non_penalized.train.x,train.y,lambda = penalty,alpha = alpha,family = family)
result$models_zero[[i]] = model.zero
predict.test.zero = predict(model.zero,newx=non_penalized.test.x)
result$predictions_zero[[i]] = cbind(test.y,predict.test.zero[,1])
colnames(result$predictions_zero[[i]]) = c("real","predicted")
result$roc_zero[[i]] = roc(test.y,predict.test.zero[,1])
result$auc_zero[i] = result$roc_zero[[i]]$auc
#work model
#print("full model run")
train.all.x = cbind(non_penalized.train.x,train.x)
test.all.x = cbind(non_penalized.test.x,test.x)
penalty = c(rep(0,ncol(non_penalized.train.x)),rep(1,ncol(train.x)))
model = double.cv.glmnet(train.all.x,train.y,penalty.factor = penalty,nfolds = nfold.int,family = family)
result$models[[i]] = model
predict.test = predict(model,newx = test.all.x,s=s)
result$predictions[[i]] = cbind(test.y,predict.test)
colnames(result$predictions[[i]]) = c("real","predicted")
result$roc[[i]] = roc(test.y,predict.test[,1])
result$auc[i] = result$roc[[i]]$auc
}
#rocr statistics
return(result)
}
parse_results = function(pred_object){
betas = matrix(nrow = nrow(pred_object$models$Fold01$glmnet.fit$beta),ncol = length(names(pred_object$models)),
dimnames = list(rownames(pred_object$models$Fold01$glmnet.fit$beta),names(pred_object$models)))
var_orders = matrix(nrow = nrow(pred_object$models$Fold01$glmnet.fit$beta),ncol = length(names(pred_object$models)),
dimnames = list(rownames(pred_object$models$Fold01$glmnet.fit$beta),names(pred_object$models)))
for(i in names(pred_object$models)){
n = which(pred_object$models[[i]]$glmnet.fit$lambda == pred_object$models[[i]]$lambda.min)
betas[,i] = pred_object$models[[i]]$glmnet.fit$beta[,n]
var_orders[,i] = order(abs(betas[,i]),decreasing = F)
}
return(list(betas = betas,
orders = var_orders)
)
}
str(run_CV)
1/100+1/20+1/50
pval.matrix = matrix(1:100,nrow = 10)
pval.matrix
rownames(pval.matrix) = paste0("s",1:10)
colnames(pval.matrix) = paste0("d",1:10)
pval.matrix
pval.matrix[1:10,1:10]=runif(1:100)
pval.matrix
qval = matrix(p.adjust(pval.matrix),dimnames = dimnames(pval.matrix),nrow = nrow(pval.matrix))
qval
data = read.table("clipboard",sep="\t")
head(data)
View(data)
View(data)
plot(-log(data$pvalue,base=10),-log(data$pvalue_stoolibs.removed,base=10))
plot(-log(data$FDR,base=10),-log(data$FDR_stoolibs.removed,base=10))
sum(data$FDR<0.05)
sum(data$FDR_stoolibs.removed<0.05)
sum(data$FDR_stoolibs.removed<0.1)
hist(data$FDR,breaks = 40)
hist(data$pvalue,breaks = 40)
hist(data$pvalue_stoolibs.removed,breaks = 40)
by.1 = p.adjust(data$pvalue,method = "BY")
by.2 = p.adjust(data$pvalue_stoolibs.removed,method = "BY")
hist(by.1)
by.1
sum(by.1<0.05)
sum(by.2<0.05)
sum(data$bonferroni<0.05)
sum(data$bonferroni_stoolibs.removed<0.05)
sum(data$FDR_stoolibs.removed<0.05)
sum(data$FDR<0.05)
294/494
103/159
63/79
sum(by.1<0.01)
sum(by.2<0.01)
s1=c(0,0,0,0,0,0,1,23,532,43,43,643,6)
length(s1)
s2 = rnorm(13)
s2
sumary(lm(s2 ~ s1))
summary(lm(s2 ~ s1))
s3 = s1
s3
s3[s3==0] = NA
s3
summary(lm(s2 ~ s3))
summary(lm(s2[s1>0] ~ s1[s1>0]))
s1
s4 = as.integer(s1 >0)
s4
matrix(rep(0,10),rep(1,10),rep(3,10),rep(4,10))
matrix(c(rep(0,10),rep(1,10),rep(3,10),rep(4,10)),ncol = 2
)
matrix(c(rep(0,10),rep(1,10),rep(3,10),rep(4,10)),ncol = 2) -> s1
s1
colSums(s1 >0)
colSums(s1 >0)/ nrow(s1)
colSums(s1 >0)/ nrow(s1) > 0.6
s2[,colSums(s1 >0)/ nrow(s1) > 0.6] -> s3
s2[,colSums(s1 >0)/ nrow(s1) > 0.6,drop = F] -> s3
s2[,(colSums(s1 >0)/ nrow(s1) > 0.6),drop = F] -> s3
dim(s2)
s1[,(colSums(s1 >0)/ nrow(s1) > 0.6),drop = F] -> s3
s3
a  = c("s","s","d")
sd(a)
s= data.frame(a=rnorm(100),b= rnorm(100),c= rnorm(100),d= rnorm(100))
m = data.matrix(s)
m
s2 = s[,apply(m,2,sd)!=0,drop = F]
s2
s2
c = data.frame(a = rnorm(100),b = c(rnorm(99),NA))
?any
any(c)
any(c[,1])
any(c[,1],is.na())
any(is.na(c))
apply(c,1,function(x){any(is.na(x))})
!apply(c,1,function(x){any(is.na(x))})
c[!apply(c,1,function(x){any(is.na(x))}),,drop=F]
data = read.table("clipboard",header=T,as.is = T,sep="\t")
head(data)
table(data$Protein[data$before_BH<0.05])
table(data$Protein[data$after_BH<0.05])
table(data$Protein[data$before_BY<0.05])
table(data$Protein[data$before_bonferroni<0.05])
table(data$Protein[data$before_bonferroni<0.1])
data[data$Protein=="CASP.3",]
dim(data[data$Protein=="CASP.3",])
dim(data[data$Protein=="TR",])
library(gap)
qqunif(data[data$Protein=="CASP.3","pvalue"])
qqunif(data[data$Protein=="TR","pvalue"])
table(data$Protein[data$before_BH<0.05])
qqunif(data[data$Protein=="CCL22","pvalue"])
qqunif(data[data$Protein=="CHI3L1","pvalue"])
qqunif(data[data$Protein=="CNTN1","pvalue"])
qqunif(data[data$Protein=="CTSD","pvalue"])
table(data$Protein[data$before_BY<0.05])
table(data$Protein[data$before_bonferroni<0.05])
qqunif(data[data$Protein=="JAM.A","pvalue"])
qqunif(data[data$Protein=="KLK6","pvalue"])
taxa =data
path = read.table("clipboard",as.is = T,header=T,sep="\t")
head(path)
table(path$factor1[path$before_BH<0.05])
dim(path)
path = read.table("clipboard",as.is = T,header=T,sep="\t")
table(path$factor1[path$before_BH<0.05])
table(path$factor1[path$before_BY<0.05])
qqunif(path[path$factor1=="TNF.R2","pvalue"])
table(path$factor1[path$bonferroni<0.05])
d1 = read.table("clipboard",header=T,row.names=1,sep="\t")
dim(d1)
data = read.table("LLD_omics_linkage.txt",as.is =T,header=T)
dim(data)
head(data)
summary(data$OLINK_ID)
ol = read.table("Olink_proteomics (1)/Data/CVD3_olinkNormal_FullsetNoControls_t.txt",header=T,row.names=1,sep="\t")
ol
dim(olink)
dim(ol)
linkage = data
head(data)
dim(data)
ss = data.frame(LLD_ID = colnames(olink),OLINK_ID = colnames(OLINK_ID))
ss = data.frame(LLD_ID = colnames(olink),OLINK_ID = colnames(olink))
ss = data.frame(LLD_ID = colnames(ol),OLINK_ID = colnames(ol))
head(ss)
tail(ss)
ss[1300,]
ss[1400,]
ss[1350,]
ss[1340,]
ss[1338,]
ss[1331,]
ss[1330,]
ss[1329,]
ss= ss[1:1329,]
head(linkage)
linkage2 = linkage[,-3]
upd = merge(ss,linkage2,all=T)
head(upd)
dim(upd)
table(upd$MB_MGS_ID)
summary(upd$MB_MGS_ID)
head(upd)
sum(!is.na(upd$MB_MGS_ID))
tail(upd)
sum(!is.na(upd$MB_16S_ID))
head(upd)
head(upd$NMR_ID)
sum(!is.na(upd$NMR_ID))
sss = read.table("clipboard")
dim(sss)
dim(ss)
dim(sss)
sum(!is.na(upd$OLINK_ID))
ssss = read.table("clipboard")
ssss = read.table("clipboard")
ssss = read.table("clipboard")
dim(ssss)
ssss[1,1345]
ssss[1,1339]
ssss[1,1329]
ssss[1,1330]
ssss[1,1331]
dim(ssss)
1448 = 1330
1448 - 1330
linkage
?grep("new",c("new","old"))
grep("new",c("new","old"))
library(pwr)
installpackages("pwr")
install.packages("pwr")
library(pwr)
version
install.packages(c("ape", "backports", "BH", "bnlearn", "car", "caret", "checkmate", "circlize", "corrplot", "data.table", "digest", "dplyr", "ellipse", "FactoMineR", "foreach", "gap", "glue", "gridExtra", "Hmisc", "htmlTable", "htmlwidgets", "iterators", "knitr", "lazyeval", "lme4", "memuse", "mice", "mvtnorm", "quantreg", "Rcpp", "RcppEigen", "RCurl", "reshape2", "rlang", "rmarkdown", "rprojroot", "scales", "stringi", "tibble", "tidyr", "vcfR", "vegan", "viridis", "yaml", "zoo"))
library(pwr)
pwr.f2.test(u=1,v=1000,f2 = 0.1,sig.level = 0.05)
pwr.f2.test(u=1,v=1000,f2 = 0.0.1,sig.level = 0.05)
pwr.f2.test(u=1,v=1000,f2 = 0.01,sig.level = 0.05)
pwr.f2.test(u=1,v=1000,f2 = -0.62,sig.level = 0.05)
pwr.f2.test(u=1,v=1000,f2 = 0.62,sig.level = 0.05)
pwr.r.test(n=1000,r = sqrt(0.132),sig.level = 0.05)
pwr.r.test(n=1000,r = 0.14,sig.level = 0.05)
pwr.r.test(n=1000,r = sqrt(0.1),sig.level = 0.05)
pwr.r.test(n=1000,r = sqrt(0.01),sig.level = 0.05)
pwr.r.test(n=1000,r = sqrt(0.01),sig.level = 0.05)
(1+(6.5e-9/(1-6.5e-9)^(2/3)))^(-1)
(1+(0.05/(1-0.05)^(2/3)))^(-1)
pchisq(qchisq(0.05/32,df=1,lower.tail=FALSE), df=1,lower.tail=FALSE, ncp=(qchisq(3.06e-12,df=1,lower.tail=FALSE)-1)*22564/116373)
power_est = function(alpha = 0.05, ndiscovery = 116373,nreplication = 22564,pvalue = 3.06e-12,df=1)
)
power_est = function(alpha = 0.05, ndiscovery = 116373,nreplication = 22564,pvalue = 3.06e-12,df=1) {
pwr_est = pchisq(
qchisq(
alpha,df=df,lower.tail=FALSE),
df=df,lower.tail=FALSE,
ncp=(qchisq(pvalue,df=df,lower.tail=FALSE)-1)*nreplication/ndiscovery)
pwr_est
}
power_est(pvalue = 1e-8,ndiscovery = 3394,nreplication = 1000)
power_est = function(alpha = 0.05, ndiscovery = 116373,nreplication = 1264,pvalue = 3.06e-12,df=1) {
pwr_est = pchisq(
qchisq(
alpha,df=df,lower.tail=FALSE),
df=df,lower.tail=FALSE,
ncp=(qchisq(pvalue,df=df,lower.tail=FALSE)-1)*nreplication/ndiscovery)
pwr_est
}
power_est(ndiscovery = 3394,pvalue = 2e-132)
pvals = read.table("clipboard")
pvals
pvals = pvals[,1]
pvas
pvals
pvals = read.table("clipboard")
apply(pvals,1,function(x){power_est(pvalue = x[1,],ndiscovery = 3394)})
pvals
pvals = read.table("clipboard",sep="\t")
head(pvals)
apply(pvals,1,function(x){power_est(pvalue = x[,1],ndiscovery = 3394)})
pvals = pvals[,1]
pvals
lapply(pvals,function(x){power_est(pvalue=x,ndiscovery = 3394)})
unlist(lapply(pvals,function(x){power_est(pvalue=x,ndiscovery = 339)4)})
as.vector(lapply(pvals,function(x){power_est(pvalue=x,ndiscovery = 339)4)})
as.vector(lapply(pvals,function(x){power_est(pvalue=x,ndiscovery = 3394))})
as.vector(lapply(pvals,function(x){power_est(pvalue=x,ndiscovery = 3394))})
as.vector(lapply(pvals,function(x){power_est(pvalue=x,ndiscovery = 3394))})
as.vector(lapply(pvals,function(x){power_est(pvalue=x,ndiscovery = 3394)}))
unlist(lapply(pvals,function(x){power_est(pvalue=x,ndiscovery = 3394)}))
unlist(lapply(pvals,function(x){power_est(pvalue=x,ndiscovery = 3394)}))->s1
write.table(s1,"clipboard",row.names=F,col.names =F,quote=F)
suhre = read.table("clipboard")
rep_power = unlist(lapply(suhre[,1],function(x){power_est(pvalue=x,ndiscovery = 1000)}))->s1
rep_power = unlist(lapply(suhre[,1],function(x){power_est(pvalue=x,ndiscovery = 1000)}))
suhre
rep_power
write.table(rep_power,row.names=F,col.names=F,quote=F)
write.table(rep_power,"clipboard",row.names=F,col.names=F,quote=F)
sun = read.table("clipboard")
sun
rep_sun = unlist(lapply(sun[,1],function(x){power_est(pvalue=x,ndiscovery = 1340)}))
rep_sun
sun
summary(rep_sun)
summary(sun)
power_est(pvalue = 4.0E-341,ndiscovery = 1340)
power_est(pvalue = 4.0E-41,ndiscovery = 1340)
power_est(pvalue = 4.0E-341,ndiscovery = 1340)
qchisq(0.05, df = df, lower.tail = FALSE)
qchisq(0.05, df = 1, lower.tail = FALSE)
ncp=(qchisq(4e-341,df=1,lower.tail=FALSE)-1)*1264/1340)
ncp=(qchisq(4e-341,df=1,lower.tail=FALSE)-1)*1264/1340
ncp
rep_sun
which.max(sun[,1])
sun
power_est(pvalue = 7.48e-10,ndiscovery = 1340)
sun = read.table("clipboard")
rep_sun = unlist(lapply(sun[,1],function(x){power_est(pvalue=x,ndiscovery = 1340)}))
rep_sun
write.table(rep_sun,file = "clipboard",row.names=F,col.names=F)
sun2 = read.table("clipboard")
sun2 = read.table("clipboard")
rep_sun2 = unlist(lapply(sun2[,1],function(x){power_est(pvalue=x,ndiscovery = 3301)}))
rep_sun2
write.table(rep_sun2,file = "clipboard",row.names+F,col.names=F)
write.table(rep_sun2,file = "clipboard",row.names=F,col.names=F)
rep_sun2 = unlist(lapply(sun2[,1],function(x){power_est(pvalue=x,ndiscovery = 3301,alpha =0.01)}))
rep_sun2
rep_sun2 = unlist(lapply(sun2[,1],function(x){power_est(pvalue=x,ndiscovery = 3301,alpha =1e-8)}))
rep_sun2
r = sample(c(0,1),100)
r = sample(c(0,1),100,replace = T)
r
f = rnorm(100)
resid(glm(r ~ f,family = "binomial"))
hist(resid(glm(r ~ f,family = "binomial")))
hist(resid(glm(r ~ f,family = "binomial")),breaks = 100)
q()
diet_raw = read.table("clipboard",header=T,row.names=1,sep="\t")
head(diet_raw)
diet_tr = read.table("Metabolism/alex_stuff/clean/data/phenotypes/diet_clear.txt")
diet_tr = read.table("Metabolism/alex_stuff/data/fullDataset/phenotypes/20150722_Diet__1135patients_log_imputed.txt",header=T,row.names=1,sep="\t")
colnames(diet_tr)
colnames(diet_raw)
hist(diet_raw[,1])
hist(diet_tr[,1])
hist(diet_raw[,1])
diet_raw[,1]
plot(diet_raw[,1],diet_tr[,1])
diet_raw[2,1]
diet_tr[2,1]
diet_tr[1,1]
diet_raw[1,1]
log(71.4)
log(71.4,base=10)
min(diet_tr[diet_tr[,1]>0,1])
log(0.1,base=10)
which(diet_tr[,1]<0.11)
which(diet_tr[,1]<0.1004)
which(diet_tr[,1]<0.1004&diet_tr[,1]>0)
diet_tr[314,1]
diet_raw[314,1]
log(diet_raw[314,1]base=10)
log(diet_raw[314,1],base=10)
which(diet_raw[,1]<0.1004&diet_raw[,1]>0)
which(diet_raw[,1]<1.1004&diet_raw[,1]>0)
which(diet_raw[,1]<10&diet_raw[,1]>0)
which(diet_raw[,1]<5&diet_raw[,1]>0)
which(diet_raw[,1]<2&diet_raw[,1]>0)
diet_raw[314,1]
log(1.26,base=10)
sum(diet_tr<0)
diet_tr[333,]]
diet_tr[333,]
which(data_tr<0,arr.ind=T)
which(diet_tr<0,arr.ind=T)
diet_tr[,3]
plot(diet_raw[,3],diet_tr[,3])
sum(diet_raw[,3])
sum(diet_raw[,3],na.rm =T)
sum(diet_raw[,3]<0,na.rm =T)
sum(diet_raw[,3]<1,na.rm =T)
sum(diet_raw[,3]<1&diet_raw[,3]>0,na.rm =T)
colnames(diet_raw)
colnames(diet_tr)
apply(diet_raw,2,function(x){sum(x>0 & x<1})
apply(diet_raw,2,function(x){sum(x>0 & x<1)}
)
apply(diet_raw,2,function(x){sum(x>0 & x<1,na.rm =T)})
apply(diet_raw,2,function(x){sum(x>0 & x<1,na.rm =T)})
colnames(diet)
colnames(diet_tr)
plot(diet_raw[,31],diet_tr[,31])
smoothScatter(diet_raw[,31],diet_tr[,31])
diet_raw[,31]==0
sum(smoothScatter(diet_raw[,31],diet_tr[,31]))
sum(diet_raw[,31]==0)
sum(diet_raw[,31]==0,na.rm =T)
r = rnorm(10000)
r
r = rnorm(1000)
r
r=rnorm(10000)
r
r = rnorm(100)
r
r=rnorm(10000)
r
r
sessionInfo()
r=rnorm(10000)
r
r=rnorm(10000)
r
r = rnorm(10000)
r
setwd("Vbox_public/my_github/miQTL_cookbook/")
